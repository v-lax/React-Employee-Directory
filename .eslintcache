[{"/Users/valliappanlakshmanan/Desktop/CodingBootCamp/Homework/react-employee-directory/src/index.js":"1","/Users/valliappanlakshmanan/Desktop/CodingBootCamp/Homework/react-employee-directory/src/App.js":"2","/Users/valliappanlakshmanan/Desktop/CodingBootCamp/Homework/react-employee-directory/src/component/Header.js":"3","/Users/valliappanlakshmanan/Desktop/CodingBootCamp/Homework/react-employee-directory/src/component/Search.js":"4","/Users/valliappanlakshmanan/Desktop/CodingBootCamp/Homework/react-employee-directory/src/component/Table.js":"5","/Users/valliappanlakshmanan/Desktop/CodingBootCamp/Homework/react-employee-directory/src/component/TableRow.js":"6"},{"size":244,"mtime":1610227014109,"results":"7","hashOfConfig":"8"},{"size":3337,"mtime":1610338132888,"results":"9","hashOfConfig":"8"},{"size":310,"mtime":1610338135594,"results":"10","hashOfConfig":"8"},{"size":634,"mtime":1610325616288,"results":"11","hashOfConfig":"8"},{"size":1123,"mtime":1610338126897,"results":"12","hashOfConfig":"8"},{"size":515,"mtime":1610313254855,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"q5g1k",{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"/Users/valliappanlakshmanan/Desktop/CodingBootCamp/Homework/react-employee-directory/src/index.js",[],["30","31"],"/Users/valliappanlakshmanan/Desktop/CodingBootCamp/Homework/react-employee-directory/src/App.js",["32","33"],"import React from \"react\";\nimport Header from \"./component/Header\";\nimport Search from \"./component/Search\";\nimport Table from \"./component/Table\";\nimport axios from \"axios\";\nimport \"./style.css\"\nimport { findAllByTestId } from \"@testing-library/react\";\n\nlet data;\n\nclass App extends React.Component {\n  state = {\n    loading: true,\n    employeeList: {},\n    filteredList: null,\n    ascending: true\n  }\n\n  async componentDidMount() {\n    let response = await axios({\n      method: 'get',\n      url: 'https://randomuser.me/api/?results=50',\n      responseType: 'stream'\n    })\n    data = response.data.results;\n    this.setState({\n      loading: false,\n      employeeList: response.data.results,\n      filteredList: response.data.results\n    })\n  }\n\n  search = (str) => {\n    const filteredList = this.state.employeeList.filter(employee => {\n      const fullName = (employee.name.first + \" \" + employee.name.last).toLowerCase();\n      return fullName.startsWith(str);\n    })\n    this.setState({ filteredList: filteredList });\n  }\n\n  sort = (header) => {\n\n    if (header === 'Name') {\n      if (this.state.ascending === true) {\n        this.sortAscending(this.state.filteredList)\n        this.setState({ ascending: false })\n      }\n      if (this.state.ascending === false) {\n        this.sortDecending(this.state.filteredList)\n        this.setState({ ascending: true })\n      }\n    } else if (header === 'Email') {\n      if (this.state.ascending === true) {\n        this.sortAscending(this.state.filteredList)\n        this.setState({ ascending: false })\n      }\n      if (this.state.ascending === false) {\n        this.sortDecending(this.state.filteredList)\n        this.setState({ ascending: true })\n      }\n    } else if (header === 'Age') {\n\n    } else if (header === \"State\") {\n\n    }\n  }\n  sortAscending = (arr) => {\n    arr.sort(function (a, b) {\n      var nameA = (a.name.first + a.name.last).toUpperCase(); // ignore upper and lowercase\n      var nameB = (b.name.first + b.name.last).toUpperCase(); // ignore upper and lowercase\n      if (nameA > nameB) {\n        return -1;\n      }\n      if (nameA < nameB) {\n        return 1;\n      }\n      // names must be equal\n      return 0;\n    });\n    this.setState({ filteredList: arr })\n  }\n\n  sortDecending = (arr) => {\n    arr.sort(function (a, b) {\n      var nameA = (a.name.first + a.name.last).toUpperCase(); // ignore upper and lowercase\n      var nameB = (b.name.first + b.name.last).toUpperCase(); // ignore upper and lowercase\n      if (nameA < nameB) {\n        return -1;\n      }\n      if (nameA > nameB) {\n        return 1;\n      }\n      // names must be equal\n      return 0;\n    });\n    this.setState({ filteredList: arr })\n  }\n\n  render() {\n    if (this.state.loading) {\n      return (\n        <div className=\"spinner\">\n          <div className=\"spinner-border\" role=\"status\">\n            <span className=\"sr-only\">Loading...</span>\n          </div>\n        </div>\n      )\n    }\n    return (\n      <div className=\"App\">\n        <Header />\n        <Search searchFunction={this.search} />\n        <div class=\"card\">\n          <div class=\"card-body text-center\">\n            Click on the name column to sort the table by name.\n          </div>\n        </div>\n        <Table employees={this.state.filteredList} sort={this.sort} />\n      </div>\n    );\n  }\n}\n\nexport default App;","/Users/valliappanlakshmanan/Desktop/CodingBootCamp/Homework/react-employee-directory/src/component/Header.js",[],"/Users/valliappanlakshmanan/Desktop/CodingBootCamp/Homework/react-employee-directory/src/component/Search.js",[],"/Users/valliappanlakshmanan/Desktop/CodingBootCamp/Homework/react-employee-directory/src/component/Table.js",[],"/Users/valliappanlakshmanan/Desktop/CodingBootCamp/Homework/react-employee-directory/src/component/TableRow.js",["34"],"import React from \"react\";\n\nfunction TableRow(props) {\n    return (\n        <tr>\n            <td>\n            <img src={props.picture.thumbnail} alt=\"image of employee\" className=\"img-thumbnail\">\n            \n            </img>\n            </td>\n            <td>{props.name.first + \" \" + props.name.last}</td>\n            <td>{props.email}</td>\n            <td>{props.registered.age}</td>\n            <td>{props.location.state}</td>\n            <td>{props.phone}</td>\n        </tr>\n    )\n}\n\nexport default TableRow;",["35","36"],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":7,"column":10,"nodeType":"43","messageId":"44","endLine":7,"endColumn":25},{"ruleId":"41","severity":1,"message":"45","line":25,"column":5,"nodeType":"43","messageId":"44","endLine":25,"endColumn":9},{"ruleId":"46","severity":1,"message":"47","line":7,"column":13,"nodeType":"48","endLine":7,"endColumn":98},{"ruleId":"37","replacedBy":"49"},{"ruleId":"39","replacedBy":"50"},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"no-unused-vars","'findAllByTestId' is defined but never used.","Identifier","unusedVar","'data' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement",["51"],["52"],"no-global-assign","no-unsafe-negation"]